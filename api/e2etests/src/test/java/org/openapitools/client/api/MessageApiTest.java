/*
 * GoatChat API
 * server API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import okhttp3.OkHttpClient;
import org.junit.jupiter.api.*;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.*;

import java.util.UUID;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageApi
 */
@Disabled
public class MessageApiTest {
    private final MessageApi messageApi = new MessageApi();
    private final UserApi userApi = new UserApi();
    UserCredentialsDTO userCredentialsDTO = new UserCredentialsDTO();
    UserCredentialsDTO userCredentialsDTO2 = new UserCredentialsDTO();
    NewMessageDTO newMessageDTO = new NewMessageDTO();
    NewMessageDTO newMessageDTO2 = new NewMessageDTO();
    Message message = new Message();
    Message message2 = new Message();
    MessageDTO mess = new MessageDTO();
    MessageDTO mess2 = new MessageDTO();


    @BeforeEach
    public void init() throws ApiException {
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        userApi.setApiClient(apiClient);
        messageApi.setApiClient(apiClient);
        // Create a user
        userCredentialsDTO
                .login("hamdzrdan")
                .password("pwd")
                .domain("goats")
                .pictureBase64("maPhotoEnBase64");

        userCredentialsDTO2
                .login("zkrdrdr")
                .password("pwd")
                .domain("goats")
                .pictureBase64("maPhotoEnBase64");

        // Sign up the user
        userApi.signup(userCredentialsDTO);
        userApi.signup(userCredentialsDTO2);
        userApi.signin(userCredentialsDTO);

        newMessageDTO.setTo(userCredentialsDTO2.getLogin());
        newMessageDTO.setBody("A message from Hamza to Zakaria");
        newMessageDTO.setType("string");
        newMessageDTO.setToDomain(userCredentialsDTO2.getDomain());

        mess  = messageApi.messagePost(newMessageDTO);
        message.body(mess.getBody());
        message.timestamp(mess.getTimestamp());
        message.from(mess.getFrom());
        message.to(mess.getTo());
        message.type(mess.getType());
        message.id(UUID.randomUUID());


        newMessageDTO2.setTo(userCredentialsDTO.getLogin());
        newMessageDTO2.setBody("A message from Zakaria to Hamza");
        newMessageDTO2.setType("string");
        newMessageDTO2.setToDomain(userCredentialsDTO.getDomain());

        mess2 = messageApi.messagePost(newMessageDTO2);
        message2.body(mess2.getBody());
        message2.timestamp(mess2.getTimestamp());
        message2.from(mess2.getFrom());
        message2.to(mess2.getTo());
        message2.type(mess2.getType());
        // Delete the user created earlier
        userApi.delete(userCredentialsDTO.getLogin());
        userApi.signout();
        userApi.signin(userCredentialsDTO2);
        userApi.delete(userCredentialsDTO2.getLogin());
        userApi.signout();
    }

    @AfterEach
    public void tearDown() throws ApiException {

    }




    //La gestion des messages dans notre application ne se fait avec des requetes http (on stoque le message après son envoie)
    //mais elle se fait lors de la récéption d'un message par le router, donc on arrive pas à tester nos méthodes sauf si
    //nous avons une base de donnée déjà remplie avec des messages, et on fait les tests sur cette base de donnée.
    //Mais lors du deploiement de l'application, on perd notre base de donnée, donc on ne peut pas faire les tests.










    /**
     * POST message/addReactionToMessage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addReactionToMessageTest() throws ApiException {
        /*
        MessageReaction messageReaction = new MessageReaction();
        messageApi.messagePost(newMessageDTO);
        messageReaction.setType("like");
        messageReaction.setId(mess.getId());
        System.out.println("dreb likum" + message.getBody());
        MessageReaction response = messageApi.addReactionToMessage(messageReaction);

        Assertions.assertEquals(false, messageReaction == null);
        Assertions.assertEquals("like", response.getType());

        //trying to react to a message that not exist
        MessageReaction messageReaction1 = new MessageReaction();
        messageReaction1.setType("like");
        messageReaction1.setId(new UUID(12,32));
        Assertions.assertEquals(true, messageReaction == null);

*/


    }

    /**
     * DELETE message/deleteMessage/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMessageTest() throws ApiException {
        /*UUID id = mess.getId();

        // Assuming that messageApi.deleteMessage returns a ResponseEntity
        ResponseEntity response = messageApi.deleteMessage(id); //it working

        UUID randomUUID = UUID.randomUUID();
        try {
            ResponseEntity response2 = messageApi.deleteMessage(randomUUID);
        } catch (ApiException e) {
            Assertions.assertEquals(404, e.getCode());
        }

        //I'm not the owner of the message
        UUID id2 = message2.getId();
        try {
            ResponseEntity response3 = messageApi.deleteMessage(id2);
        } catch (ApiException e) {
            Assertions.assertEquals(401, e.getCode());
        }

         */


    }


    /**
     * POST message/getAllMessagesOfConversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllMessageOfConversationTest() throws ApiException {
        /*UserProfileDTO userProfileDTO = new UserProfileDTO();
        userProfileDTO.login(userCredentialsDTO2.getLogin());
        List<Message> response = messageApi.getAllMessageOfConversation(userProfileDTO);
        Assertions.assertTrue( response.size() > 0);

         */
    }

    /**
     * POST message/getLastMessagesOfConversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastMessageOfConversationTest() throws ApiException {
        /*UserProfileDTO userProfileDTO = new UserProfileDTO();
        userProfileDTO.login(userCredentialsDTO2.getLogin());

        Message response = messageApi.getLastMessageOfConversation(userProfileDTO);
        Assertions.assertEquals("A message from Zakaria to Hamza", response.getBody());

         */
    }

    /**
     * POST message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagePostTest() throws ApiException {
        MessageDTO response = messageApi.messagePost(newMessageDTO);
        Assertions.assertEquals("A message from Hamza to Zakaria", response.getBody());
    }

}
