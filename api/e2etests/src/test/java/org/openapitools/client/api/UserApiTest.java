/*
 * GoatChat API
 * server API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.OkHttpClient;
import org.junit.jupiter.api.*;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.model.PictureDTO;
import org.openapitools.client.model.UserCredentialsDTO;
import org.openapitools.client.model.UserProfileDTO;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
public class UserApiTest {

    private final UserApi api = new UserApi();
    UserCredentialsDTO userCredentialsDTO = new UserCredentialsDTO();

    @BeforeEach
    public void init() throws ApiException {

        // Simulate the behavior of a web browser by remembering cookies set by the server
        OkHttpClient.Builder builder = new OkHttpClient.Builder();
        OkHttpClient okHttpClient = builder.cookieJar(new MyCookieJar()).build();
        ApiClient apiClient = new ApiClient(okHttpClient);
        api.setApiClient(apiClient);
        // Create a user
        userCredentialsDTO
                .login("hamzaaa908928")
                .password("pwd")
                .domain("goats")
                .pictureBase64("maPhotoEnBase64");

        // Sign up the user
        api.signup(userCredentialsDTO);
        api.signin(userCredentialsDTO);
    }

    @AfterEach
    public void tearDown() throws ApiException {
        // Delete the user created earlier
        api.delete(userCredentialsDTO.getLogin());
        api.signout();
    }

    /**
     * DELETE user/{login}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {

        //pour le delete d'un user deja existant ca se fait dans le tearDown

        // Try to delete a non-existent user (should return HttpStatus.NOT_FOUND)
        try {
            api.delete("nonExistentUser");
            Assertions.fail("Deleting a non-existent user should result in an exception");
        } catch (ApiException e) {
            Assertions.assertEquals(404, e.getCode());
        }
    }

    /**
     * GET user/all
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUsersTest() throws ApiException {
        List<UserProfileDTO> response = api.getAllUsers();
        Assertions.assertTrue(response.size() >= 1);
    }

    /**
     * POST user/getDomain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainTest() throws ApiException, IOException {
        UserProfileDTO userProfileDTO = new UserProfileDTO();
        userProfileDTO.login(userCredentialsDTO.getLogin());
        String jsonResponse = api.getDomain(userProfileDTO);

        // Use Jackson ObjectMapper to parse JSON
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(jsonResponse);

        // Extract the "domain" field from the JSON
        String domain = jsonNode.get("domain").asText();

        // Assert the domain
        Assertions.assertEquals(userCredentialsDTO.getDomain(), domain);
    }

    /**
     * POST user/getPicture
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPictureTest() throws ApiException {
        UserProfileDTO userProfileDTO = new UserProfileDTO();
        userProfileDTO.login(userCredentialsDTO.getLogin());
        PictureDTO response = api.getPicture(userProfileDTO);
        Assertions.assertEquals(userCredentialsDTO.getPictureBase64(), response.getPictureBase64());
    }

    /**
     * GET user/username
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserNameTest() throws ApiException, JsonProcessingException {

        String jsonResponse = api.getUserName();
        // Use Jackson ObjectMapper to parse JSON
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(jsonResponse);

        // Extract the "domain" field from the JSON
        String usenrame = jsonNode.get("username").asText();


        Assertions.assertEquals(userCredentialsDTO.getLogin(), usenrame);
    }

    /**
     * GET user/profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profileTest() throws ApiException {
        UserProfileDTO response = api.profile();
        Assertions.assertEquals(userCredentialsDTO.getLogin(), response.getLogin());
    }

    /**
     * POST user/signin
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signinTest() throws ApiException {
        api.signout();
        UserCredentialsDTO userCredentialsDTO2 = new UserCredentialsDTO();
        userCredentialsDTO2.login("existepas");
        userCredentialsDTO2.password("pwd");
        userCredentialsDTO2.domain("goats");
        try {
            api.signin(userCredentialsDTO2);
            Assertions.fail("Signing in with a non-existent user should result in an exception");
        } catch (ApiException e) {
            Assertions.assertEquals(500, e.getCode());
        }
        api.signin(userCredentialsDTO);

    }

    /**
     * POST user/signout
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signoutTest() throws ApiException {
        //it's woking in the @aftereach
    }

    /**
     * POST user/signup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signupTest() throws ApiException {
        //triying to signup with an existing username
        try {
            api.signup(userCredentialsDTO);
            Assertions.fail("Signing up with an existing user should result in an exception");
        } catch (ApiException e) {
            Assertions.assertEquals(500, e.getCode());
        }
    }

}
