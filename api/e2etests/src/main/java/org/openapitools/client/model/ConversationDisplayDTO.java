/*
 * GoatChat API
 * server API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationDisplayDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConversationDisplayDTO {
  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private String picture;

  public static final String SERIALIZED_NAME_LAST_MESSAGE = "lastMessage";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE)
  private String lastMessage;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Long timestamp;

  public static final String SERIALIZED_NAME_IS_SEEN = "isSeen";
  @SerializedName(SERIALIZED_NAME_IS_SEEN)
  private Boolean isSeen;

  public static final String SERIALIZED_NAME_IS_INTERN = "isIntern";
  @SerializedName(SERIALIZED_NAME_IS_INTERN)
  private Boolean isIntern;

  public ConversationDisplayDTO() {
  }

  public ConversationDisplayDTO username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  public ConversationDisplayDTO picture(String picture) {
    
    this.picture = picture;
    return this;
  }

   /**
   * Get picture
   * @return picture
  **/
  @javax.annotation.Nullable
  public String getPicture() {
    return picture;
  }


  public void setPicture(String picture) {
    this.picture = picture;
  }


  public ConversationDisplayDTO lastMessage(String lastMessage) {
    
    this.lastMessage = lastMessage;
    return this;
  }

   /**
   * Get lastMessage
   * @return lastMessage
  **/
  @javax.annotation.Nullable
  public String getLastMessage() {
    return lastMessage;
  }


  public void setLastMessage(String lastMessage) {
    this.lastMessage = lastMessage;
  }


  public ConversationDisplayDTO timestamp(Long timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }


  public ConversationDisplayDTO isSeen(Boolean isSeen) {
    
    this.isSeen = isSeen;
    return this;
  }

   /**
   * Get isSeen
   * @return isSeen
  **/
  @javax.annotation.Nullable
  public Boolean getIsSeen() {
    return isSeen;
  }


  public void setIsSeen(Boolean isSeen) {
    this.isSeen = isSeen;
  }


  public ConversationDisplayDTO isIntern(Boolean isIntern) {
    
    this.isIntern = isIntern;
    return this;
  }

   /**
   * Get isIntern
   * @return isIntern
  **/
  @javax.annotation.Nullable
  public Boolean getIsIntern() {
    return isIntern;
  }


  public void setIsIntern(Boolean isIntern) {
    this.isIntern = isIntern;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationDisplayDTO conversationDisplayDTO = (ConversationDisplayDTO) o;
    return Objects.equals(this.username, conversationDisplayDTO.username) &&
        Objects.equals(this.picture, conversationDisplayDTO.picture) &&
        Objects.equals(this.lastMessage, conversationDisplayDTO.lastMessage) &&
        Objects.equals(this.timestamp, conversationDisplayDTO.timestamp) &&
        Objects.equals(this.isSeen, conversationDisplayDTO.isSeen) &&
        Objects.equals(this.isIntern, conversationDisplayDTO.isIntern);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, picture, lastMessage, timestamp, isSeen, isIntern);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationDisplayDTO {\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    lastMessage: ").append(toIndentedString(lastMessage)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    isSeen: ").append(toIndentedString(isSeen)).append("\n");
    sb.append("    isIntern: ").append(toIndentedString(isIntern)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("username");
    openapiFields.add("picture");
    openapiFields.add("lastMessage");
    openapiFields.add("timestamp");
    openapiFields.add("isSeen");
    openapiFields.add("isIntern");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ConversationDisplayDTO
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationDisplayDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationDisplayDTO is not found in the empty JSON string", ConversationDisplayDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationDisplayDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationDisplayDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("picture") != null && !jsonObj.get("picture").isJsonNull()) && !jsonObj.get("picture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture").toString()));
      }
      if ((jsonObj.get("lastMessage") != null && !jsonObj.get("lastMessage").isJsonNull()) && !jsonObj.get("lastMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationDisplayDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationDisplayDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationDisplayDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationDisplayDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationDisplayDTO>() {
           @Override
           public void write(JsonWriter out, ConversationDisplayDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationDisplayDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationDisplayDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationDisplayDTO
  * @throws IOException if the JSON string is invalid with respect to ConversationDisplayDTO
  */
  public static ConversationDisplayDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationDisplayDTO.class);
  }

 /**
  * Convert an instance of ConversationDisplayDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

